public class BST {
     private Node root;

        private class Node {

            private final Integer key;
            private Node right;
            private Node left;
            private int N;

            public Node(Integer key) {
                this.key = key;
                N = 1;
            }
        }
        public boolean isEmpty() {
            return size() == 0;
        }

        public int size() {
            return sizeOf(root);
        }

        private int sizeOf(Node x) {
            return x == null ? 0 : x.N;
        }

        public Integer get(int key) {
            Node x = get(root, key);
            return x == null ? null : x.key;
        }

        private Node get(Node x, Integer key) {
            if (x == null) {
                return null;
            }
            int cmp = key.compareTo(x.key);
            if (cmp == 0) {
                return x;
             }
            if (cmp < 0) {
                return get(x.left, key);
            }
            return get(x.right, key);
        }




/*
 * Complete the function below.
 */
   public int size(Node n)
   {
       if(n == null) return 0;
       return n.N;
   }

    public void insert(int key) {
        root = put1(root, key);
    }

    public Node put1(Node x, int key) {
        if (x == null) {
            x = new Node(key);
            return x;
        }
        else {
            if (x.key < key)
                x.right = put1(x.right, key);
            else if (x.key > key)
                x.left = put1(x.left, key);
        }
        x.N = 1 + size(x.left) + size(x.right);
        return x;
    }

    public Integer getRank(int key){
        if(get(key) == null)
            return -1;
        Integer k = getrank(root, key);
            return k;
    }
     public Integer getrank(Node x, int key){
        if(x.key == key)
            return size(x.left);
        if(x.key < key)
            return 1 + size(x.left) + getrank(x.right, key);
        else
            return getrank(x.left, key);
    }
    public static void main(String[] args){
porji
 Scanner in = new Scanner(System.in);
        BST bst = new BST();
        int n = in.nextInt();
        for(int i = 0 ; i < n ; i++){
            bst.insert(in.nextInt());
        }
        int m = in.nextInt();
        for(int i = 0 ; i < m ; i++){
            System.out.println(bst.getRank(in.nextInt()));
        }
    }
}
