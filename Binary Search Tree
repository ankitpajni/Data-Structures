public class BST{
    class Node{
        private int key;
        private int value;
        private Node left;
        private Node right;
        Node(int key,int value){
            this.key = key;
            this.value = value;
            this.left = null;
            this.right = null;
        }
    }
    Node root = null;

    public boolean isEmpty(){
        return (root == null);
    }
    public void put (int key,int value){
        root = put1(root,key,value);
    }
    public Node put1 (Node root,int key,int value){
        if (root == null)
        {
            root = new Node(key,value);
            return root;
        }
        else
        {
            if( root.key < key )
                root.right = put1(root.right,key,value);
            else if( root.key > key )
                root.left = put1(root.left,key,value);
        }
    return root;
    }
    public int get ( int key ){
        int k = get1(root,key);
        return k;
    }
    public int get1 (Node root,int key){
        if( root == null )
            return 0;
        if( root.key == key )
             return root.value;
        else if (key < root.key) return get1(root.left,key);
        else return get1(root.right,key);
    }
    public void preorder(Node root){
        if(root == null)
            return;
        System.out.println(root.value);
        inorder(root.left);
        inorder(root.right);
    }
    public void inorder(Node root){
        if(root == null)
            return;
        inorder(root.left);
        System.out.println(root.value);
        inorder(root.right);
    }
    public void postorder(Node root){
        if(root == null)
            return;
        inorder(root.left);
        inorder(root.right);
        System.out.println(root.value);
    }
}
